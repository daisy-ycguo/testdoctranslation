<section 
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  version="5.0"
  xml:id="getting-started-with-vnc-proxy">
  <title>Using VNC Proxy for Instance Access</title>
  <?dbhtml stop-chunking?>
  <para>
    The VNC Proxy is an OpenStack component that allows users of Compute to
    access their instances through vnc clients. In Essex and beyond,
    there is support for both libvirt and XenServer using both Java
    and WebSocket clients.
  </para>
  <para>
    The VNC console connection works as follows:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        User connects to API and gets an access_url like
        http://ip:port/?token=xyz.
      </para>
    </listitem>
    <listitem>
      <para>
        User pastes URL in browser or as client parameter.
      </para>
    </listitem>
    <listitem>
      <para>
        Browser/Client connects to proxy.
      </para>
    </listitem>
    <listitem>
      <para>
        Proxy authorizes users token, maps the token to the -private-
        host and port of an instance's VNC server, which is located on
        the compute host. In this way, the VNC proxy works as a bridge
        between the public network, and the private host network.
      </para>
    </listitem>
    <listitem>
      <para>
        Proxy initiates connection to VNC server, and continues proxying
        until the session ends
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Note that in general, the VNC proxy performs multiple functions:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Bridges between public network (where clients live) and private
        network (where vncservers live)
      </para>
    </listitem>
    <listitem>
      <para>
        Mediates token authentication
      </para>
    </listitem>
    <listitem>
      <para>
        Transparently deals with hypervisor-specific connection details
        to provide a uniform client experience.
      </para>
    </listitem>
  </itemizedlist>
    <para>
      Both client proxies leverage a shared service to manage token auth
      called nova-consoleauth. This service must be running in order for
      for either proxy to work. Many proxies of either type can be run
      against a single nova-consoleauth service in a cluster
      configuration.
    </para>
    <para>
      nova-consoleauth should not be confused with nova-console, which
      is a xen-specific service that is not used by the most recent VNC
      proxy architecture.
    </para>

<section xml:id="typical-deployment">
  <title>Typical Deployment</title>
  <para>
    A typical deployment will consist of the following components:
  </para>
      <itemizedlist>
      <listitem>
        <para>
          One nova-consoleauth process. Typically this runs on the
          controller host.
        </para>
      </listitem>
      <listitem>
        <para>
          One or more nova-novncproxy services. This supports
          browser-based novnc clients. For simple deployments, this
          service typically will run on the same machine as nova-api,
          since it proxies between the public network and the private
          compute host network.
        </para>
      </listitem>
      <listitem>
        <para>
          One or more nova-xvpvncproxy services. This supports the
          special Java client discussed in this document. For simple
          deployments, this service typically will run on the same
          machine as nova-api, since it proxies between the public
          network and the private compute host network.
        </para>
      </listitem>
    </itemizedlist>
  
    <para>
      Nova provides the ability to create access_urls through the
      os-consoles extension. Support for accessing this url is provided
      by novaclient:
    </para>
    <screen>
nova get-vnc-console [server_id] [xvpvnc|novnc]
</screen>

    <para> To enable vncproxy in your cloud, in addition to running one or both of the proxies and
      nova-consoleauth, you need to configure the following options on your compute hosts. </para>
    <itemizedlist>
      <listitem>
        <para> :option:`--[no]vnc_enabled` - defaults to enabled. If this option is disabled your
          instances will launch without VNC support. </para>
      </listitem>
      <listitem>
        <para>
          :option:`--vncserver_listen` - defaults to 127.0.0.1 This is
          the address that vncservers will bind, and should be
          overridden in production deployments as a private address.
          Applies to libvirt only. For multi-host libvirt deployments
          this should be set to a host management ip on the same network
          as the proxies.
        </para>
      </listitem>
      <listitem>
        <para>
          :option:`--vncserver_proxyclient_address` - defaults to
          127.0.0.1 This is the address of the compute host that nova
          will instruct proxies to use when connecting to instance
          vncservers. For all-in-one xen server domU deployments this
          can be set to 169.254.0.1. For multi-host xen server domU
          deployments this can be set to a dom0 management ip on the
          same network as the proxies. For multi-host libvirt
          deployments this can be set to a host management ip on the
          same network as the proxies.
        </para>
      </listitem>
      <listitem>
        <para>
          :option:`--novncproxy_base_url=[base url for client
          connections]` -this is the public base url to which clients
          will connect. &quot;?token=abc&quot; will be added to this url
          for the purposes of auth. When using the system as described
          in this document, an appropriate value is
          &quot;<link xlink:href="http://$SERVICE_HOST:6080/vnc_auto.html">http://$SERVICE_HOST:6080/vnc_auto.html</link>&quot;
          where SERVICE_HOST is a public hostname.
        </para>
      </listitem>
      <listitem>
        <para>
          :option:`--xvpvncproxy_base_url=[base url for client
          connections]` -this is the public base url to which clients
          will connect. &quot;?token=abc&quot; will be added to this url
          for the purposes of auth. When using the system as described
          in this document, an appropriate value is
          &quot;<link xlink:href="http://$SERVICE_HOST:6081/console">http://$SERVICE_HOST:6081/console</link>&quot;
          where SERVICE_HOST is a public hostname.
        </para>
      </listitem>
    </itemizedlist>
  <section xml:id="accessing-vnc-consoles-with-a-java-client">
    <title>Accessing VNC Consoles with a Java client</title>
    <para>
      To enable support for the OpenStack Java VNC client in nova, nova
      provides the nova-xvpvncproxy service, which you should run to
      enable this feature.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          :option:`--xvpvncproxy_port=[port]` - port to bind (defaults
          to 6081)
        </para>
      </listitem>
      <listitem>
        <para>
          :option:`--xvpvncproxy_host=[host]` - host to bind (defaults
          to 0.0.0.0)
        </para>
      </listitem>
    </itemizedlist>
    <para>
      As a client, you will need a special Java client, which is a
      version of TightVNC slightly modified to support our token auth:
    </para>
    <screen>
git clone https://github.com/cloudbuilders/nova-xvpvncviewer
cd nova-xvpvncviewer/viewer
make
</screen>
    <para>
      Then, to create a session, first request an access url using
      python-novaclient and then run the client like so:
    </para>
    <screen>
# Retrieve access url
nova get-vnc-console [server_id] xvpvnc
# Run client
java -jar VncViewer.jar URL [access_url]
</screen>
  
    <note><para>Note that nova-vncproxy has been replaced with nova-novncproxy.</para>
    <para>
      The previous VNC proxy, nova-vncproxy, has been removed from the
      nova source tree and replaced with an improved server that can be
      found externally at
      <link xlink:href="http://github.com/cloudbuilders/noVNC.git">http://github.com/cloudbuilders/noVNC.git</link>
      (in a branch called vnc_redux while this patch is in review).
    </para></note>
    <para>
      To use this nova-novncproxy:
    </para>
    <screen>
git clone http://github.com/cloudbuilders/noVNC.git
git checkout vnc_redux
utils/nova-novncproxy --flagfile=[path to flagfile]
</screen>
    <para>
      The configuration option param should point to your nova config that
      includes the rabbit server address and credentials.
    </para>
    <para>
      By default, nova-novncproxy binds 0.0.0.0:6080. This can be
      configured with:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          novncproxy_port=[port]`
        </para>
      </listitem>
      <listitem>
        <para>
          novncproxy_host=[host]`
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="accessing-a-vnc-console-through-a-web-browser">
    <title>Accessing a VNC console through a web browser</title>
    <para>
      Retrieving an access_url for a web browser is similar to the flow
      for the Java client:
    </para>
    <screen>
# Retrieve access url
nova get-vnc-console [server_id] novnc
# Then, paste the url into your web browser
</screen>
    <para>
      Additionally, you can use horizon to access browser-based VNC
      consoles for instances.
    </para>
  </section>
</section>
</section>
